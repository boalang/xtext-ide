/*
 * Copyright 2015, Hridesh Rajan, Robert Dyer, 
 *                 Iowa State University of Science and Technology,
 *                 and Bowling Green State University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @author rdyer
 */
grammar edu.iastate.cs.boa.Boa hidden(WS, SL_COMMENT)

generate boa "http://www.iastate.edu/cs/boa/Boa"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Block: stmts+=ProgramStatement+;

ProgramStatement returns Statement:
	Declaration
	| Statement;

Declaration returns Statement:
	TypeDeclaration
	| StaticVariableDeclaration
	| VariableDeclaration;

Type:
	(ArrayType
	| MapType
	| TupleType
	| OutputType
	| FunctionType
	| VisitorType
	| StackType
	| QueueType
	| SetType
	| Identifier);

TypeDeclaration:
	'type' name=Identifier '=' aliasedtype=Type;

StaticVariableDeclaration:
	'static' variable=VariableDeclaration;

VariableDeclaration:
	ForVariableDeclaration ';';

Component:
	(name=Identifier ':')? type=Type;

TupleType:
	{TupleType}
	'{' (head=Member (',' tail+=Member)* ','?)? '}';

Member:
	TypeDeclaration
	| StaticVariableDeclaration
	| Component;

ArrayType:
	'array' {ArrayType} 'of' values=Component;

MapType:
	'map' {MapType} '[' index=Component ']' 'of' values=Component;

StackType:
	'stack' {StackType} 'of' values=Component;

QueueType:
	'queue' {QueueType} 'of' values=Component;

SetType:
	'set' {SetType} 'of' values=Component;

OutputType:
	'output' funcname=Identifier ('(' params=ExpressionList ')')? ('[' indexes+=Component ']')* 'of' valtype=Component
		(=> 'weight' weight=Component)? (=> 'format' '(' format=ExpressionList ')')?;

FunctionType:
	'function' {FunctionType} '(' (paramsHead=Parameter (',' paramsTail+=Parameter)*)? ')' (':' return=Type)?;

Parameter returns Component:
	name=Identifier ':' type=Type;

VisitorType:
	{VisitorType}
	'visitor';

// FIXME: had to enable backtracking for this rule and
// not sure these semantic predicates are right
Statement:
	(=> Block
	| => AssignmentStatement
	| BreakStatement
	| ContinueStatement
	| StopStatement
	| DoStatement
	| ForStatement
	| IfStatement
	| ResultStatement
	| ReturnStatement
	| SwitchStatement
	| ForeachStatement
	| ExistsStatement
	| IfallStatement
	| WhileStatement
	| EmptyStatement
	| EmitStatement
	| ExpressionStatement);

EmptyStatement:
	';' {EmptyStatement};

AssignmentStatement:
	lhs=Factor '=' rhs=Expression ';';

Block:
	'{' {Block} stmts+=ProgramStatement* '}';

BreakStatement:
	'break' {BreakStatement} ';';

ContinueStatement:
	'continue' {ContinueStatement} ';';

DoStatement:
	'do' body=Statement 'while' '(' condition=Expression ')' ';';

EmitStatement:
	name=Identifier ('[' indexes+=Expression ']')* '<<' value=Expression ('weight' weight=Expression)? ';';

ForStatement:
	'for' '(' (init=ForExpression)? ';' (condition=Expression)? ';' (update=ForExpression)? ')' body=Statement;

ForExpression:
	ForVariableDeclaration
	| ForExpressionStatement;

ForVariableDeclaration returns VariableDeclaration:
	name=Identifier ':' (type=Type)? ('=' init=Expression)?;

ForExpressionStatement:
	expr=Expression postfix=('++' | '--')?;

ExpressionStatement:
	expr=ForExpressionStatement ';';

IfStatement:
	'if' '(' condition=Expression ')' body=Statement (=> 'else' else=Statement)?;

ResultStatement:
	'result' expr=Expression ';';

ReturnStatement:
	'return' {Return} expr=Expression? ';';

SwitchStatement:
	'switch' '(' expr=Expression ')' '{'
	cases+=SwitchCase*
	'default' ':'
	defaultStmts+=Statement+
	'}';

SwitchCase:
	'case' cases=ExpressionList ':' stmts+=Statement+;

ForeachStatement:
	'foreach' '(' variable=Parameter ';' condition=Expression ')' body=Statement;

ExistsStatement:
	'exists' '(' variable=Parameter ';' condition=Expression ')' body=Statement;

IfallStatement:
	'ifall' '(' variable=Parameter ';' condition=Expression ')' body=Statement;

WhileStatement:
	'while' '(' condition=Expression ')' body=Statement;

VisitStatement:
	('before' | 'after')
	(
		wildcard='_'
		| param=Parameter
		| head=Identifier (',' tail+=Identifier)*
	)
	'->' stmts=ProgramStatement;

StopStatement:
	'stop' {StopStatement} ';';

Expression:
	lhs=Conjunction (('||' | 'or') rhs+=Conjunction)*;

ExpressionList:
	head=Expression (',' tail+=Expression)*;

Conjunction:
	lhs=Comparison (('&&' | 'and') rhs+=Comparison)*;

Comparison:
	lhs=SimpleExpression (op=('==' | '!=' | '<' | '<=' | '>' | '>=') rhs=SimpleExpression)?;

SimpleExpression:
	lhs=Term (ops+=('+' | '-' | '|' | '^') rhs+=Term)*;

Term:
	lhs=Factor (ops+=('*' | '/' | '%' | '<<' | '>>' | '&') rhs+=Factor)*;

// FIXME: not sure this semantic predicate is right
Factor:
	operand=Operand => ops+=(Selector | Index | Call)*;

Selector:
	'.' {Selector} name=Identifier;

Index:
	'[' {Index} start=Expression (':' end=Expression)? ']';

Call:
	'(' {Call} args=ExpressionList? ')';

Operand:
	( {StringLiteral}    lit=STRING_LIT
	| {StringLiteral}    lit=REGEX_LIT
	| {CharacterLiteral} lit=CHARACTER_LIT
	| {TimeLiteral}      lit=TIME_LIT
	| {IntegerLiteral}   lit=INTEGER_LIT
	| {FloatingLiteral}  lit=FLOATING_LIT
	| Composite
	| FunctionExpression
	| VisitorExpression
	| UnaryFactor
	| {DollarOperand} dol='$'
	| StatementExpression
	| ParenExpression
	| Identifier
	| {Identifier} lit='format');

UnaryFactor:
	op=('+' | '-' | '~' | '!' | 'not') operand=Factor;

ParenExpression:
	'(' expr=Expression ')';

FunctionExpression:
	(type=FunctionType | funcname=Identifier) body=Block;

VisitorExpression:
	type=VisitorType '{' (stmts+=VisitStatement)+ '}';

StatementExpression:
	'?' body=Block;

Composite:
	'{' {Composite} (p1=Pair (',' p2+=Pair)* | el=ExpressionList | ':')? '}';

Pair:
	lhs=Expression ':' rhs=Expression;

Identifier:
	lit=ID;

//
// literals
//

terminal fragment DIGIT:
	'0'
	| NON_ZERO_DIGIT;

terminal fragment NON_ZERO_DIGIT:
	'1'..'9';

terminal INTEGER_LIT returns ecore::ELong:
	'-'? DECIMAL_NUMERAL
	| '-'? HEX_NUMERAL
	| '-'? OCTAL_NUMERAL
	| BINARY_NUMERAL;

terminal fragment DECIMAL_NUMERAL:
	NON_ZERO_DIGIT DIGIT*;

terminal fragment HEX_NUMERAL:
	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal fragment OCTAL_NUMERAL:
	'0' '0'..'7'*;

terminal fragment BINARY_NUMERAL:
	'0' ('b' | 'B') ('0' | '1')+;

terminal FLOATING_LIT returns ecore::EDouble:
	'-'? DIGIT+ '.' DIGIT* EXPONENT_PART?
	| '-'? '.' DIGIT+ EXPONENT_PART?
	| '-'? DIGIT+ EXPONENT_PART;

terminal fragment EXPONENT_PART:
	('e' | 'E') ('+' | '-')? DIGIT+;

terminal CHARACTER_LIT:
	"'" SINGLE_CHARACTER "'"
	| "'" ESCAPE_SEQUENCE "'";

terminal fragment SINGLE_CHARACTER:
	!('\'' | '\\' | '\n' | '\r');

terminal REGEX_LIT:
	'`' REGEX_CHARACTER* '`';

terminal fragment REGEX_CHARACTER:
	!('`' | '\n' | '\r');

terminal STRING_LIT:
	'"' STRING_CHARACTER* '"';

terminal fragment STRING_CHARACTER:
	!('"' | '\\' | '\n' | '\r')
	| ESCAPE_SEQUENCE;

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | '\'' | '\\')
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	'\\' '0'..'7'
	| '\\' '0'..'7' '0'..'7'
	| '\\' '0'..'3' '0'..'7' '0'..'7';

terminal TIME_LIT returns ecore::ELong:
	INTEGER_LIT ('t' | 'T')?
	| 'T' STRING_LIT;

//
// identifiers
//

terminal ID:
	('a'..'z' | 'A'..'Z') ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;

//
// whitespace and comments
//

terminal WS:
	// FIXME: for some reason the unicode char gives duplicate error with '\f'
	(' ' | '\t' | '\r' | '\n' | '\f' /*| '\u000C'*/)+;

terminal SL_COMMENT:
	'#' !('\r' | '\n')*;